/*
 # @ Author: Pallab Maji
 # @ Create Time: 2024-02-06 10:53:24
 # @ Modified time: 2024-02-06 10:53:28
 # @ Description: Enter description here
*/

#include <ros/ros.h>
#include <tf/transform_broadcaster.h>

#include <sensor_msgs/Imu.h>

tf::Quaternion q_imu;
double imu_roll = 0;
double imu_pitch = 0;
double imu_yaw = 0;

void imuCallback(const sensor_msgs::Imu::ConstPtr &msg)
{
    q_imu.setX(msg->orientation.x);
    q_imu.setY(msg->orientation.y);
    q_imu.setZ(msg->orientation.z);
    q_imu.setW(msg->orientation.w);

    // convert to RPY
    tf::Matrix3x3(q_imu).getRPY(imu_roll, imu_pitch, imu_yaw);

    ROS_INFO("Roll: %f, Pitch: %f, Yaw: %f", imu_roll, imu_pitch, imu_yaw);
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, "vedyne_tf_publisher");
    ros::NodeHandle nh;

    tf::TransformBroadcaster broadcaster;
    ros::Rate rate(100.0);


    while (nh.ok())
    {

        tf::Transform transform;
        transform.setOrigin(tf::Vector3(10.0, 10.0, 0.0));
        tf::Quaternion q;

        // subscribe to imu data
        ros::Subscriber sub = nh.subscribe("/vehicle_dynamics/imu", 1, imuCallback);

        q.setRPY(imu_roll, imu_pitch, imu_yaw);
        transform.setRotation(q);

        broadcaster.sendTransform(tf::StampedTransform(transform, ros::Time::now(), "map", "vedyne_0"));

        ros::spinOnce();

        rate.sleep();
    }

    return 0;
}
